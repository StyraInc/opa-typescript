/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { OpaApiClientCore } from "../core.js";
import { encodeFormQuery, encodeJSON, encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../sdk/models/errors/httpclienterrors.js";
import * as errors from "../sdk/models/errors/index.js";
import { SDKError } from "../sdk/models/errors/sdkerror.js";
import { SDKValidationError } from "../sdk/models/errors/sdkvalidationerror.js";
import * as operations from "../sdk/models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

export enum CompileQueryWithPartialEvaluationAcceptEnum {
  applicationJson = "application/json",
  applicationVndStyraMultitargetPlusJson =
    "application/vnd.styra.multitarget+json",
  applicationVndStyraSqlMysqlPlusJson = "application/vnd.styra.sql.mysql+json",
  applicationVndStyraSqlPostgresqlPlusJson =
    "application/vnd.styra.sql.postgresql+json",
  applicationVndStyraSqlSqlitePlusJson =
    "application/vnd.styra.sql.sqlite+json",
  applicationVndStyraSqlSqlserverPlusJson =
    "application/vnd.styra.sql.sqlserver+json",
  applicationVndStyraUcastAllPlusJson = "application/vnd.styra.ucast.all+json",
  applicationVndStyraUcastLinqPlusJson =
    "application/vnd.styra.ucast.linq+json",
  applicationVndStyraUcastMinimalPlusJson =
    "application/vnd.styra.ucast.minimal+json",
  applicationVndStyraUcastPrismaPlusJson =
    "application/vnd.styra.ucast.prisma+json",
}

/**
 * Partially evaluate a query
 */
export function compileQueryWithPartialEvaluation(
  client: OpaApiClientCore,
  request: operations.CompileQueryWithPartialEvaluationRequest,
  options?: RequestOptions & {
    acceptHeaderOverride?: CompileQueryWithPartialEvaluationAcceptEnum;
  },
): APIPromise<
  Result<
    operations.CompileQueryWithPartialEvaluationResponse,
    | errors.ClientError
    | errors.ServerError
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: OpaApiClientCore,
  request: operations.CompileQueryWithPartialEvaluationRequest,
  options?: RequestOptions & {
    acceptHeaderOverride?: CompileQueryWithPartialEvaluationAcceptEnum;
  },
): Promise<
  [
    Result<
      operations.CompileQueryWithPartialEvaluationResponse,
      | errors.ClientError
      | errors.ServerError
      | SDKError
      | SDKValidationError
      | UnexpectedClientError
      | InvalidRequestError
      | RequestAbortedError
      | RequestTimeoutError
      | ConnectionError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) =>
      operations.CompileQueryWithPartialEvaluationRequest$outboundSchema.parse(
        value,
      ),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = encodeJSON("body", payload.RequestBody, { explode: true });

  const path = pathToFunc("/v1/compile")();

  const query = encodeFormQuery({
    "explain": payload.explain,
    "instrument": payload.instrument,
    "metrics": payload.metrics,
    "pretty": payload.pretty,
  });

  const headers = new Headers(compactMap({
    "Content-Type": "application/json",
    Accept: options?.acceptHeaderOverride
      || "application/json;q=1, application/vnd.styra.multitarget+json;q=0.90, application/vnd.styra.sql.mysql+json;q=0.80, application/vnd.styra.sql.postgresql+json;q=0.70, application/vnd.styra.sql.sqlite+json;q=0.60, application/vnd.styra.sql.sqlserver+json;q=0.50, application/vnd.styra.ucast.all+json;q=0.40, application/vnd.styra.ucast.linq+json;q=0.30, application/vnd.styra.ucast.minimal+json;q=0.20, application/vnd.styra.ucast.prisma+json;q=0",
    "Accept-Encoding": encodeSimple(
      "Accept-Encoding",
      payload["Accept-Encoding"],
      { explode: false, charEncoding: "none" },
    ),
    "Content-Encoding": encodeSimple(
      "Content-Encoding",
      payload["Content-Encoding"],
      { explode: false, charEncoding: "none" },
    ),
  }));

  const secConfig = await extractSecurity(client._options.bearerAuth);
  const securityInput = secConfig == null ? {} : { bearerAuth: secConfig };
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "compileQueryWithPartialEvaluation",
    oAuth2Scopes: null,

    resolvedSecurity: requestSecurity,

    securitySource: client._options.bearerAuth,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "POST",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    query: query,
    body: body,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "4XX", "500", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    operations.CompileQueryWithPartialEvaluationResponse,
    | errors.ClientError
    | errors.ServerError
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.json(
      200,
      operations.CompileQueryWithPartialEvaluationResponse$inboundSchema,
      { key: "CompileResultJSON" },
    ),
    M.json(
      200,
      operations.CompileQueryWithPartialEvaluationResponse$inboundSchema,
      {
        ctype: "application/vnd.styra.multitarget+json",
        key: "CompileResultMultitarget",
      },
    ),
    M.json(
      200,
      operations.CompileQueryWithPartialEvaluationResponse$inboundSchema,
      {
        ctype: "application/vnd.styra.ucast.all+json",
        key: "CompileResultUCAST",
      },
    ),
    M.json(
      200,
      operations.CompileQueryWithPartialEvaluationResponse$inboundSchema,
      {
        ctype: "application/vnd.styra.ucast.linq+json",
        key: "CompileResultUCAST",
      },
    ),
    M.json(
      200,
      operations.CompileQueryWithPartialEvaluationResponse$inboundSchema,
      {
        ctype: "application/vnd.styra.ucast.minimal+json",
        key: "CompileResultUCAST",
      },
    ),
    M.json(
      200,
      operations.CompileQueryWithPartialEvaluationResponse$inboundSchema,
      {
        ctype: "application/vnd.styra.ucast.prisma+json",
        key: "CompileResultUCAST",
      },
    ),
    M.json(
      200,
      operations.CompileQueryWithPartialEvaluationResponse$inboundSchema,
      {
        ctype: "application/vnd.styra.sql.mysql+json",
        key: "CompileResultSQL",
      },
    ),
    M.json(
      200,
      operations.CompileQueryWithPartialEvaluationResponse$inboundSchema,
      {
        ctype: "application/vnd.styra.sql.postgresql+json",
        key: "CompileResultSQL",
      },
    ),
    M.json(
      200,
      operations.CompileQueryWithPartialEvaluationResponse$inboundSchema,
      {
        ctype: "application/vnd.styra.sql.sqlite+json",
        key: "CompileResultSQL",
      },
    ),
    M.json(
      200,
      operations.CompileQueryWithPartialEvaluationResponse$inboundSchema,
      {
        ctype: "application/vnd.styra.sql.sqlserver+json",
        key: "CompileResultSQL",
      },
    ),
    M.jsonErr(400, errors.ClientError$inboundSchema),
    M.jsonErr(500, errors.ServerError$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
