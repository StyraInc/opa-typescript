/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * OPA service is healthy. If the bundles option is specified then all configured bundles have been activated. If the plugins option is specified then all plugins are in an OK state.
 */
export type HealthyServer = {};

/** @internal */
export const HealthyServer$inboundSchema: z.ZodType<
  HealthyServer,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type HealthyServer$Outbound = {};

/** @internal */
export const HealthyServer$outboundSchema: z.ZodType<
  HealthyServer$Outbound,
  z.ZodTypeDef,
  HealthyServer
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HealthyServer$ {
  /** @deprecated use `HealthyServer$inboundSchema` instead. */
  export const inboundSchema = HealthyServer$inboundSchema;
  /** @deprecated use `HealthyServer$outboundSchema` instead. */
  export const outboundSchema = HealthyServer$outboundSchema;
  /** @deprecated use `HealthyServer$Outbound` instead. */
  export type Outbound = HealthyServer$Outbound;
}

export function healthyServerToJSON(healthyServer: HealthyServer): string {
  return JSON.stringify(HealthyServer$outboundSchema.parse(healthyServer));
}

export function healthyServerFromJSON(
  jsonString: string,
): SafeParseResult<HealthyServer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HealthyServer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HealthyServer' from JSON`,
  );
}
